import random
import math
import matplotlib.pyplot as plt
import bisect

Test = 100
# k = 10
# n = k * 100 * 100
# n = k + 1

K = [i for i in range(10, Test + 1)]

# N = [i * k * 100 * 2 for i in range(1, Test + 1)]

T = 10 * 100 * 100

LRU = []
OPT = []

for k in K:
    n = k + 1
    # T = n * 100
    # generate request
    reqs = [0] * T
    pages = range(n)
    for i in range(T):
        reqs[i] = random.choice(pages)

    # print(reqs)

    # LRU
    table_miss = 0
    cache = [-1] * k
    cnt = [-1] * k

    for i in range(T):
        if reqs[i] in cache:
            cnt[cache.index(reqs[i])] = i
        else:
            table_miss += 1
            if -1 in cache:
                index = cache.index(-1)
                cache[index] = reqs[i]
                cnt[index] = i
            else:
                index = cnt.index(min(cnt))
                cache[index] = reqs[i]
                cnt[index] = i
        # print(cache)

    LRU.append(table_miss)
    print("LRU %s" % table_miss)

    # OPT
    table_miss = 0
    cache = [-1] * k
    cnt = [-1] * k

    page_to_index = [[] for _ in range(n)]
    for i in range(T):
        page_to_index[reqs[i]].append(i)
    for i in range(n):
        page_to_index[i].append(T + 1)

    for i in range(T):
        if reqs[i] in cache:
            continue
        else:
            table_miss += 1
            if -1 in cache:
                index = cache.index(-1)
                cache[index] = reqs[i]
            else:
                for j in range(k):
                    if cnt[j] == -1 or cnt[j] < i:
                        cnt[j] = page_to_index[cache[j]][bisect.bisect_right(page_to_index[cache[j]], i)]

                index = cnt.index(max(cnt))
                cache[index] = reqs[i]
                cnt[index] = -1

    OPT.append(table_miss)
    print("OPT %s" % table_miss)


# LRU = [98990, 98949, 99048, 98988, 98990, 98949, 99048, 98988, 99187, 99213]
# OPT = [99187, 99213, 99249, 99195, 99187, 99213, 99249, 99195, 99187, 99213]

# LRU = [98970, 99000, 99026, 98979, 98937, 99007, 99012, 98992, 99009, 98940, 99041, 99017, 99003, 99053, 99023, 99029, 99011, 98979, 98986, 99030]
# OPT = [88744, 88772, 88780, 88840, 88720, 88796, 88710, 88744, 88746, 88894, 88769, 88752, 88790, 88775, 88861, 88845, 88795, 88802, 88794, 88844]

# LRU = [199009, 399078, 599042, 798973, 999038, 1199031, 1399009, 1598978, 1798972, 1999045, 2199001, 2398995, 2599047, 2798937, 2998987, 3199071, 3398989, 3598914, 3799006, 3999022, 4198991, 4399007, 4599023, 4798987, 4998990, 5198987, 5399034, 5599032, 5798989, 5999010, 6199013, 6399021, 6599008, 6798992, 6999017, 7199041, 7398973, 7598975, 7798996, 7998991, 8199035, 8399024, 8599024, 8798992, 8998945, 9199021, 9399004, 9599048, 9798974, 9998978]
# OPT = [184190, 377650, 572466, 768247, 964522, 1161028, 1357970, 1555100, 1752613, 1949873, 2147334, 2345056, 2542794, 2740472, 2938523, 3136778, 3334816, 3532909, 3730696, 3929172, 4127157, 4325797, 4524142, 4722241, 4920932, 5119014, 5317535, 5516058, 5714505, 5912989, 6112139, 6310601, 6508876, 6707549, 6905822, 7104795, 7303740, 7502068, 7700784, 7899547, 8098478, 8297517, 8495996, 8695008, 8893473, 9092726, 9291159, 9490132, 9688584, 9887785]

# LRU = [9222, 4824, 3276, 2495, 1957, 1700, 1460, 1304, 1121, 1064, 1026, 956, 895, 821, 839, 777, 732, 725, 660, 708, 684, 645, 640, 666, 645, 632, 623, 614, 620, 618, 644, 613, 645, 604, 655, 624, 595, 636, 636, 634, 676, 648, 653, 665, 665, 671, 677, 687, 697, 713, 704, 715, 716, 730, 744, 743, 749, 739, 762, 746, 754, 777, 789, 793, 786, 782, 812, 830, 842, 847, 833, 847, 847, 859, 883, 873, 902, 908, 916, 919, 940, 920, 960, 950, 963, 963, 979, 973, 995, 1003, 1026, 1014, 1028, 1052, 1040, 1065, 1064, 1071, 1082, 1097]
# OPT = [3155, 1347, 838, 602, 484, 404, 365, 331, 303, 287, 276, 270, 270, 266, 271, 271, 271, 275, 281, 287, 289, 294, 299, 310, 314, 322, 329, 334, 343, 352, 359, 368, 378, 386, 394, 401, 409, 420, 427, 438, 447, 456, 465, 474, 482, 493, 500, 510, 521, 529, 538, 548, 557, 566, 578, 586, 595, 605, 615, 623, 632, 642, 651, 663, 671, 681, 689, 701, 711, 720, 728, 738, 749, 758, 768, 778, 787, 798, 808, 817, 827, 834, 845, 855, 865, 875, 885, 893, 905, 914, 926, 934, 944, 955, 963, 975, 983, 992, 1003, 1013]

# LRU = [50030, 33687, 25370, 19892, 16701, 14424, 12669, 11090, 9954, 9010, 8414, 7715, 7089, 6655, 6228, 6007, 5610, 5178, 4985, 4745, 4590, 4382, 4177, 4025, 3832, 3744, 3523, 3409, 3304, 3210, 3207, 3111, 3017, 2935, 2923, 2758, 2712, 2531, 2544, 2469, 2377, 2394, 2290, 2258, 2145, 2164, 2120, 2031, 1978, 2048, 2033, 1945, 1975, 1880, 1832, 1831, 1656, 1754, 1744, 1734, 1751, 1596, 1647, 1564, 1593, 1522, 1540, 1501, 1455, 1524, 1440, 1399, 1435, 1372, 1330, 1314, 1414, 1351, 1360, 1280, 1291, 1302, 1267, 1277, 1276, 1206, 1215, 1222, 1164, 1156, 1192, 1168, 1149, 1189, 1132, 1151, 1188, 1063, 1115, 1049]
# OPT = [50030, 22423, 13765, 9584, 7289, 5866, 4885, 4072, 3536, 3094, 2765, 2511, 2271, 2064, 1877, 1771, 1634, 1495, 1424, 1337, 1277, 1201, 1131, 1070, 1028, 1006, 955, 898, 876, 831, 806, 774, 751, 730, 710, 686, 674, 640, 628, 616, 591, 586, 563, 547, 530, 522, 515, 498, 486, 485, 489, 467, 464, 447, 439, 441, 421, 421, 413, 414, 411, 390, 392, 388, 387, 375, 375, 369, 357, 365, 356, 356, 352, 344, 337, 337, 337, 336, 335, 326, 327, 327, 322, 321, 313, 313, 321, 314, 306, 308, 301, 301, 303, 304, 298, 302, 300, 292, 295, 287]


print(LRU)
print(OPT)

LRU_MISS_RATE = [0] * Test
OPT_MISS_RATE = [0] * Test
LRU_OVER_OPT = [0] * Test
N_over_K = [0] * Test

for i in range(Test):
    # LRU_MISS_RATE[i] = LRU[i] / (N[i] * 100)
    # OPT_MISS_RATE[i] = OPT[i] / (N[i] * 100)
    # LRU_OVER_OPT[i] = LRU[i] / OPT[i]
    # N_over_K[i] = N[i] / k
    LRU_MISS_RATE[i] = LRU[i] / T
    OPT_MISS_RATE[i] = OPT[i] / T
    LRU_OVER_OPT[i] = LRU[i] / OPT[i]
    N_over_K[i] = K[i]



fig, ax = plt.subplots()
ax.plot(N_over_K[10:], LRU_MISS_RATE[10:], label='LRU MISS RATE')
ax.plot(N_over_K[10:], OPT_MISS_RATE[10:], label='OPT MISS RATE')
ax.plot(N_over_K, LRU_OVER_OPT, label='Expected Competitive Ratio')

# plt.xlabel('n / k')
plt.xlabel('k')
plt.ylabel('Page Miss Rate')
# plt.title("k = %s, n = %s, T = %s" % (k, n, T))
# plt.ylim((T * 0.9, T * 1.1))
# plt.ylim((0, T*1.1))
ax.legend()
plt.show()

# ax.plot(D_list, [math.log2(i) for i in D_list], label='log2 (d)')
# ax.plot(D_list, [math.log2(i)-1 for i in D_list], label='log2 (d)-1')
ax.legend()
plt.show()
plt.savefig('kaiyu.png')





# for D in D_list:
#     iter = 1000
#     acc = 0
#     for _ in range(iter):
#         Num = bin(random.getrandbits(D))[2:]
#         cnt = 0
#         maxn = 0
#         last = False
#
#         for b in Num:
#             if b == '0':
#                 if last:
#                     maxn = max(maxn, cnt)
#                     cnt = 0
#                     last = False
#             else:
#                 last = True
#                 cnt += 1
#         maxn = max(maxn, cnt)
#         acc += maxn
#     ans[D] = acc / iter
#     print(D, ans[D])







